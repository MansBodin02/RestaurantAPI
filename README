üçΩÔ∏è Restaurant API
Ett REST API f√∂r att hantera lunchmenyer, matvaror, kundbest√§llningar och nyheter i en restaurang.

üìå Installation och konfiguration
1Ô∏è‚É£ Skapa en lokal databas
Innan du startar applikationen, skapa en tom MySQL-databas med f√∂ljande inst√§llningar:

Databasnamn: restaurantdb
Anv√§ndarnamn: root
L√∂senord: root
Du beh√∂ver inte skapa n√•gra tabeller manuellt ‚Äì de genereras automatiskt vid den f√∂rsta POST-f√∂rfr√•gan.

üìå API-Endpoints
ü•ó Lunch Controller (/api/lunches)
Hantera lunchmenyer, d√§r varje lunch har namn, vecka och veckodag.

Metod	Endpoint	                            Beskrivning
GET	    /api/lunches/	                        H√§mta alla luncher.
GET	    /api/lunches/{lunchWeek}	            H√§mta alla luncher f√∂r en viss vecka.
GET	    /api/lunches/{lunchWeek}/{lunchDay}	    H√§mta lunch f√∂r en specifik dag i en vecka.
POST	/api/lunches/	                        L√§gg till en lunch.
POST	/api/lunches/batch	                    L√§gg till flera luncher samtidigt.
PUT	    /api/lunches/{lunchWeek}/{lunchDay}	    Uppdatera en befintlig lunch.
DELETE	/api/lunches/{lunchWeek}	            Radera alla luncher f√∂r en viss vecka.
DELETE	/api/lunches/{lunchWeek}/{lunchDay}	    Radera en specifik lunch.


Exempel p√• att skapa en lunch med POST:
http://localhost:8080/api/lunches/
json
{
  "lunchName": "Pasta Carbonara",
  "lunchWeek": 7,
  "lunchDay": 1,
  "lunchPrice": 140.0,
  "lunchDescription": Vad som helst
}


Exempel p√• att skapa flear luncher med POST:
http://localhost:8080/api/lunches/batch
json
[
    {
        "lunchName": "Vegansk Buddha Bowl",
        "lunchWeek": 1,
        "lunchDay": 1,
        "lunchPrice": 140.0,
        "lunchDescription": "En blandning av gr√∂nsaker, quinoa, hummus och avocado."
    },
    {
        "lunchName": "Margherita Pizza",
        "lunchWeek": 1,
        "lunchDay": 2,
        "lunchPrice": 120.0,
        "lunchDescription": "Tomats√•s, mozzarella och f√§rsk basilika."
    }
]



üçï Food Controller (/api/foods)
Hantera matvaror i restaurangen, s√•som deras namn, kategori, beskrivning och pris.

Metod	Endpoint	                        Beskrivning
GET	    /api/foods/	                        H√§mta alla matvaror.
GET	    /api/foods/Category/{foodCategory}	H√§mta mat baserat p√• kategori.
GET	    /api/foods/food/{foodName}	        H√§mta en specifik matvara.
POST	/api/foods/	                        L√§gg till en ny matvara.
POST	/api/foods/batch	                L√§gg till flera matvaror samtidigt.
PUT	    /api/foods/food/{foodName}	        Uppdatera en matvara.
DELETE	/api/foods/food/{foodName}	        Radera en matvara.

Exempel p√• att skapa en food med POST:
http://localhost:8080/api/foods/
json
{
    "foodName": "Pasta Carbonara",
    "foodType": "MEAT",
    "foodCategory": "MAIN_COURSE",
    "foodDescription": "Kr√§mig pasta med pancetta, √§gg, parmesan och svartpeppar.",
    "foodPrice": 130
}


Exempel p√• att skapa flear food med POST:
http://localhost:8080/api/foods/batch
json
[
  {
    "foodName": "Vegansk Buddha Bowl",
    "foodType": "VEGETARIAN",
    "foodCategory": "MAIN_COURSE",
    "foodDescription": "En blandning av gr√∂nsaker, quinoa, hummus och avocado.",
    "foodPrice": 140
  },
  {
    "foodName": "Margherita Pizza",
    "foodType": "VEGETARIAN",
    "foodCategory": "MAIN_COURSE",
    "foodDescription": "Tomats√•s, mozzarella och f√§rsk basilika.",
    "foodPrice": 120
  },
  {
    "foodName": "Korv med br√∂d",
    "foodType": "MEAT",
    "foodCategory": "MAIN_COURSE",
    "foodDescription": "Korv i br√∂d med senap och ketchup.",
    "foodPrice": 80
  }
]



Exempel p√• att skapa Drink med POST:
http://localhost:8080/api/drinks/
json
    {
        "drinkName": "Sprite",
        "drinkCategory": "NONALCOHOLIC",
        "drinkDescription": "Kolsyrad l√§skedryck med limesmak.",
        "drinkPrice": 30.0
    }

Exempel p√• att skapa flera drinks med POST:
http://localhost:8080/api/drinks/batch
json
[
    {
        "drinkName": "Coca-Cola",
        "drinkCategory": "NONALCOHOLIC",
        "drinkDescription": "Kolsyrad l√§skedryck med colasmak.",
        "drinkPrice": 30.0
    },
    {
        "drinkName": "Fanta",
        "drinkCategory": "NONALCOHOLIC",
        "drinkDescription": "Apelsinsmakande kolsyrad l√§skedryck.",
        "drinkPrice": 30.0
    },
    {
        "drinkName": "Sprite",
        "drinkCategory": "NONALCOHOLIC",
        "drinkDescription": "Citron- och limesmakande kolsyrad dryck.",
        "drinkPrice": 30.0
    },
    {
        "drinkName": "Heineken",
        "drinkCategory": "ALCOHOL",
        "drinkDescription": "Holl√§ndsk ljus lager med frisk smak.",
        "drinkPrice": 55.0
    },
    {
        "drinkName": "Corona Extra",
        "drinkCategory": "ALCOHOL",
        "drinkDescription": "Mexikansk ljus lager, perfekt med en limeklyfta.",
        "drinkPrice": 60.0
    },
    {
        "drinkName": "Carlsberg",
        "drinkCategory": "ALCOHOL",
        "drinkDescription": "Klassisk dansk lager med en balanserad smak.",
        "drinkPrice": 50.0
    },
    {
        "drinkName": "Chardonnay",
        "drinkCategory": "ALCOHOL",
        "drinkDescription": "Fruktigt vitt vin med inslag av citrus och vanilj.",
        "drinkPrice": 120.0
    }
]


üõéÔ∏è Order Controller (/api/orders)
Hantera kundbest√§llningar. Varje best√§llning inneh√•ller en lista av matvaror, ett bordsnummer och ett totalt pris.

Metod	Endpoint	                                    Beskrivning
GET	    /api/orders/	                                H√§mta alla ordrar.
GET	    /api/orders/{orderTable}	                    H√§mta en order f√∂r ett specifikt bord.
POST	/api/orders/	                                Skapa en ny order.
POST	/api/orders/batch	                            Skapa flera ordrar samtidigt.
PUT	    /api/orders/{orderTable}	                    Uppdatera en order.
PUT	    /api/orders/{orderTable}/addFood/{foodName}	    L√§gg till mat i en befintlig order.
PUT	    /api/orders/{orderTable}/removeFood/{foodName}	Ta bort mat fr√•n en order.
DELETE	/api/orders/{orderTable}	                    Radera en order.

Exempel p√• att skapa en order med POST:
‚úÖ Endast mat
Request (POST /api/orders/)
json

{
    "orderTable": 5,
    "orderDateTime": "2025-02-15T16:33:00",
    "orderItems": [
        {
            "food": {
                "foodName": "Pasta Carbonara"
            },
            "foodQuantity": 2,
            "orderItemSpecial": "Lite mindre gr√§dde"
        }
    ],
    "orderState": "ORDERED"
}
‚úÖ Endast dryck
Request (POST /api/orders/)
json

{
    "orderTable": 6,
    "orderDateTime": "2025-02-15T17:00:00",
    "orderItems": [
        {
            "drink": {
                "drinkName": "Heineken"
            },
            "drinkQuantity": 3,
            "orderItemSpecial": "Extra kall"
        }
    ],
    "orderState": "ORDERED"
}
‚úÖ B√•de mat och dryck
Request (POST /api/orders/)
json

{
    "orderTable": 7,
    "orderDateTime": "2025-02-15T18:00:00",
    "orderItems": [
        {
            "food": {
                "foodName": "Pasta Carbonara"
            },
            "drink": {
                "drinkName": "Heineken"
            },
            "foodQuantity": 1,
            "drinkQuantity": 1,
            "orderItemSpecial": "Lite mindre gr√§dde"
        }
    ],
    "orderState": "ORDERED"
}

üì∞ News Controller (/api/news)
Hantera restaurangnyheter. Varje nyhet har en titel, beskrivning och publiceringsdatum.

Metod	Endpoint	                        Beskrivning
GET	    /api/news/	                        H√§mta alla nyheter.
GET	    /api/news/{newsTitle}/{newsDate}	H√§mta en nyhet baserat p√• titel och datum.
POST	/api/news/	                        L√§gg till en nyhet.
POST	/api/news/batch	                    L√§gg till flera nyheter.
PUT	    /api/news/{newsTitle}/{newsDate}	Uppdatera en nyhet.
DELETE	/api/news/{newsTitle}/{newsDate}	Radera en nyhet.

Exempel p√• att skapa en news med POST:
URL: http://localhost:8080/api/news/
json
{
    "newsTitle": "Ny Meny F√∂r S√§songen!",
    "newsInfo": "Vi introducerar v√•r nya meny f√∂r v√•ren, full med l√§ckra r√§tter och uppfriskande drycker.",
    "newsDate": "2025-03-01T12:00:00",
    "newsImage": "https://example.com/images/spring_menu.jpg"
}



üï¥Ô∏è Personal Controller (/api/personal)
Hantera personal i restaurangen. Varje personalmedlem har ett namn och √§r kopplat till ett eller flera arbetspass.

Metod	  Endpoint	                      Beskrivning
GET	    /api/personal/	                H√§mta alla personalmedlemmar.
GET	    /api/personal/{personalId}	    H√§mta en specifik personalmedlem.
POST	  /api/personal/	                L√§gg till en ny personalmedlem.
PUT	    /api/personal/{personalId}	    Uppdatera en personalmedlem.
DELETE	/api/personal/{personalId}	    Ta bort en personalmedlem.

Exempel p√• att skapa en personalmedlem med POST:
URL: http://localhost:8080/api/personal/
json
{
  "personalName": "Anton Svensson"
}

Exempel p√• att skapa flear personalmedlem med POST:
URL: http://localhost:8080/api/personal/batch
json
[
  {
    "personalName": "Anton Andersson"
  },
  {
    "personalName": "Lisa Karlsson"
  }
]

‚è∞ Pass Controller (/api/pass)
Hantera arbetspass och tilldelningar av personal till pass. Varje pass har ett typ (t.ex. Morgon, Kv√§ll) och kan tilldelas flera personalmedlemmar.

Metod	    Endpoint	                                Beskrivning
GET	      /api/pass/	                              H√§mta alla pass.
GET	      /api/pass/{passId}	                      H√§mta ett specifikt pass.
GET	      /api/pass/date/{date}	                    H√§mta pass f√∂r ett specifikt datum.
POST	    /api/pass/	                              Skapa ett nytt pass.
POST	    /api/pass/request	                        Skicka en beg√§ran om passbyte.
PUT	      /api/pass/{passId}/assign/{personalId}	  Tilldela en personalmedlem till ett pass.
PUT	      /api/pass/{switchPassId}/update-status	  Uppdatera status p√• ett passbyte.
DELETE	  /api/pass/{passId}	                      Ta bort ett pass.


Exempel p√• att skapa ett pass med POST:
URL: http://localhost:8080/api/pass/
json
{
  "passDateTime": "2025-03-05T08:00:00",
  "passType": "STARTERSHIFT",
  "personalPass": [
    {
      "personalId": 1
    }
  ]
}


üõ†Ô∏è Teknologier som anv√§nds
Java 17
Spring Boot
Spring Data JPA
MySQL
Postman/Curl (f√∂r API-testning)
